#!/usr/bin/python

from textwrap import dedent

import subprocess
import re
import sys

import pprint

class AutoVivification(dict):
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value


class AppHash:
    def __init__(self):
        call_parm = ["bash", "-c", "cat kiwi/*.py"]
        cmd = subprocess.Popen(
            call_parm, stdout=subprocess.PIPE, stderr=subprocess.STDOUT
        )
        begin = False
        cur_path = ''
        self.result = AutoVivification()
        for line in cmd.communicate()[0].split('\n'):
            usage = re.search('usage: (.*)', line)
            if usage:
                begin = True
                if re.match('.*--help', line):
                    mod_line = re.sub('[\[\]\|]', '', usage.group(1))
                    mod_line = re.sub('-h ', '', mod_line)
                    key_list = mod_line.split()
                    result_keys = self.validate(key_list)
                    cur_path = self.merge(result_keys, self.result)
                else:
                    key_list = usage.group(1).split()
                    result_keys = self.validate(key_list)
                    cur_path = self.merge(result_keys, self.result)
            elif begin:
                if not line:
                    begin = False
                else:
                    if re.match('.*--version', line):
                        mod_line = re.sub('[\[\]\|]', '', line)
                        mod_line = re.sub('-v ', '', mod_line)
                        key_list = mod_line.split()
                        result_keys = self.validate(key_list)
                        cur_path = self.merge(result_keys, self.result)
                    elif re.match('.*kiwi \[', line):
                        line = line.replace('[', '')
                        line = line.replace(']', '')
                        line = line.replace('|', '')
                        key_list = line.split()
                        key_list.pop(0)
                        for global_opt in key_list:
                            result_keys = self.validate(
                                ['kiwi', global_opt]
                            )
                            cur_path = self.merge(result_keys, self.result)
                    elif re.match('                \[', line):
                        opt_val = re.search('                \[(--.*)', line)
                        global_opt = opt_val.group(1)
                        global_opt = global_opt.replace('[', '')
                        global_opt = global_opt.replace(']', '')
                        global_opt = global_opt.replace('|', '')
                        result_keys = self.validate(
                            ['kiwi', global_opt]
                        )
                        cur_path = self.merge(result_keys, self.result)
                    elif re.match('.*kiwi', line):
                        mandatory_options = re.search(
                            '(.*kiwi.*?) (--.*)', line
                        )
                        if mandatory_options:
                            line = mandatory_options.group(1)
                        key_list = line.split()
                        result_keys = self.validate(key_list)
                        cur_path = self.merge(result_keys, self.result)
                        if mandatory_options:
                            for option in mandatory_options.group(2).split():
                                mod_line = cur_path + ' ' + option
                                key_list = mod_line.split()
                                result_keys = self.validate(key_list)
                                self.merge(result_keys, self.result)
                    else:
                        for mod_line in line.strip().split('|'):
                            mod_line = cur_path + ' ' + mod_line
                            mod_line = re.sub('[\[\]]', '', mod_line)
                            mod_line = re.sub('-h ', '', mod_line)
                            key_list = mod_line.split()
                            result_keys = self.validate(key_list)
                            self.merge(result_keys, self.result)

    def merge(self, key_list, result):
        raw_key_path = " ".join(key_list)
        key_path = ''
        for key in key_list:
            key_path += '[\'' + key + '\']'
        expression = 'self.result'+key_path
        exec(expression)
        return raw_key_path

    def validate(self, key_list):
        result_keys = []
        for key in key_list:
            option = re.search('^\[(--.*)=|^\[(.*)\]', key)
            mandatory = re.search('^(--.*)=', key)
            if option:
                if option.group(1):
                    result_keys.append(option.group(1))
            elif mandatory:
                if mandatory.group(1):
                    result_keys.append(mandatory.group(1))
            elif re.search('<servicename>|<command>|<args>...', key):
                pass
            else:
                key = key.replace('<','__')
                key = key.replace('>','__')
                result_keys.append(key)
        return result_keys


class AppTree:
    def __init__(self):
        self.completion = AppHash()
        self.level_dict = {}

    def traverse(self, tree=None, level=0, origin=None):
        if not tree:
            tree = self.completion.result['kiwi']
        if not origin:
            origin = 'kiwi'
        for key in tree:
            try:
                if self.level_dict[str(level)]:
                    pass
            except KeyError:
                self.level_dict[str(level)] = {}
            try:
                if self.level_dict[str(level)][origin]:
                    pass
            except KeyError:
                self.level_dict[str(level)][origin] = []

            if not key in self.level_dict[str(level)][origin]:
                self.level_dict[str(level)][origin].append(key)

            if tree[key]:
                self.traverse(tree[key], level + 1, key)



tree = AppTree()
tree.traverse()

# helpful for debugging
# pp = pprint.PrettyPrinter(indent=4)
# pp.pprint(tree.completion.result)

print dedent('''
#========================================
# _kiwi
#----------------------------------------
function _kiwi {
    local cur prev opts
    _get_comp_words_by_ref cur prev
    local cmd=$(echo $COMP_LINE | sed -e 's@-.*@@'| awk -F ' ' '{ print $NF }')
''').strip()

print '    for comp in $prev $cmd;do'
print '        case "$comp" in'
for level in sorted(tree.level_dict):
    if level == '0':
        continue
    for sub in tree.level_dict[level]:
        print '            "%s")' % (sub)
        print '                __comp_reply "%s"' % \
            (" ".join(tree.level_dict[level][sub]))
        print '                return 0'
        print '                ;;'
print '        esac'
print '    done'
print '    if [[ $COMP_LINE =~ compute ]];then'
print '        __comp_reply "--help"'
print '    else'
print '       __comp_reply "%s"' % \
    (" ".join(tree.level_dict['0']['kiwi']))
print '    fi'
print '    return 0'
print '}'
print dedent('''
#========================================
# comp_reply
#----------------------------------------
function __comp_reply {
    word_list=$@
    COMPREPLY=($(compgen -W "$word_list" -- ${cur}))
}

complete -F _kiwi -o default kiwi
''').strip()
